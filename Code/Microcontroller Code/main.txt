/*
 * Team Id: 19
 * Author List: Rajesh Roshan Behera, B soma naik
 * Filename: main.c
 * Theme: code for syncronising all the sensors, motors and displays
 * Functions: system_setup,timer_setup,terminal_setup,rfid_setup,servo_setup,irsensor_setup,prompt_message,
 *              itoa,open_gate,close_gate,get_no_rfid,Timer0IntHandler,UART0IntHandler,UART1IntHandler,
 *              update_slots,show_signal,sense_obstacles,main
 * Global Variables: irSignal,rfidValue,rfid_to_slot_map,time_to_slot_map,rfid_status_map,rfid_to_slot_v1,
 *              rfid_to_slot_v2,slot_status_v1,slot_status_v2,ui32Load,is_processed,ui8Adjust,v_type,v_slot_no,
 *              time_count
 */
#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "inc/hw_memmap.h"
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include"inc/hw_ints.h"
#include"driverlib/interrupt.h"
#include"driverlib/debug.h"
#include"driverlib/adc.h"
#include"driverlib/fpu.h"
#include "driverlib/pwm.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"
#include "driverlib/timer.h"


// LOCK_F and CR_F - used for unlocking PORTF pin 0
#define LOCK_F (*((volatile unsigned long *)0x40025520))
#define CR_F   (*((volatile unsigned long *)0x40025524))

#define PWM_FREQUENCY 55                    // for servo motor
#define VEHICLE1_SLOTS 1
#define VEHICLE2_SLOTS 1
#define MIN_SGN_STR 2000
#define RFID_TAG_LEN 12


// global variables
uint32_t irSignal[1];                       // stores ir sensor signal
char rfidValue[RFID_TAG_LEN];                         // stores the 16 byte rfid signal/value
char* rfid_to_slot_map[]={"4100A352E959","4100A3520DBD"};        // different rfid values
int time_to_slot_map[]={0,0};
int rfid_status_map[]={0,0};
char* rfid_to_slot_v1[]={"4100A352E959"};
char* rfid_to_slot_v2[]={"4100A3520DBD"};
int slot_status_v1[VEHICLE1_SLOTS]={0};         // 0-slot empty
int slot_status_v2[VEHICLE2_SLOTS]={0};         // 0-slot empty
volatile uint32_t ui32Load;
int is_processed = 1;
volatile uint8_t ui8Adjust = 115;
int v_type=0, v_slot_no=-1;
int time_count =0;


/*
 * Function Name: system_setup
 * Input: None
 * Output: None
 * Logic: set the system clock frequency,enable the peripheral for leds and switch , then enable the master interrupt
 * Example call: system_setup()
 */
void system_setup(void){
    //setting system clock frequency
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);    //
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2| GPIO_PIN_3 |GPIO_PIN_1); // setting led output pins
    IntMasterEnable(); //enable processor interrupts
}

/*
 * Function Name: timer_setup
 * Input: None
 * Output: None
 * Logic: set the setup required for timer
 * Example call: timer_setup()
 */
void timer_setup(void){
    uint32_t ui32Period;
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
    ui32Period = 1000000;
    TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period - 1);
    IntEnable(INT_TIMER0A);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    TimerEnable(TIMER0_BASE, TIMER_A);
}

/*
 * Function Name: terminal_setup
 * Input: None
 * Output: None
 * Logic: set the things required for seriel interface using UART0
 * Example call: terminal_setup()
 */
void terminal_setup(void){
    SysCtlPeripheralDisable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); // UART0
    GPIOPinConfigure(GPIO_PA1_U0TX); // pin for transmission
    GPIOPinConfigure(GPIO_PA0_U0RX); // pin for recieving
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    IntEnable(INT_UART0);//enable the UART interrupt
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT); //only enable rx interrupts
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200 , (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
}


/*
 * Function Name: rfid_setup
 * Input: None
 * Output: None
 * Logic: set the things required for rfid reader using UART1
 * Example call: rfid_setup()
 */
void rfid_setup(void){
    SysCtlPeripheralDisable(SYSCTL_PERIPH_UART1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB); // UART1
   // GPIOPinConfigure(GPIO_PB1_U1TX); // pin for transmission
    GPIOPinConfigure(GPIO_PB0_U1RX); // pin for recieving
    GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0);
    IntEnable(INT_UART1);//enable the UART interrupt
    UARTIntEnable(UART1_BASE, UART_INT_RX | UART_INT_RT); //only enable rx interrupts
    UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 9600 , (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
}


/*
 * Function Name: servo_setup
 * Input: None
 * Output: None
 * Logic: set the things required for servo motor
 * Example call: servo_setup()
 */
void servo_setup(void){
    volatile uint32_t ui32PWMClock;
    SysCtlPWMClockSet(SYSCTL_PWMDIV_64);    // set pwm clock
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);    // for servo motor
    GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0);
    GPIOPinConfigure(GPIO_PD0_M1PWM0);
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
    GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
    GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    ui32PWMClock = SysCtlClockGet()/64;
    ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
    PWMGenConfigure(PWM1_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN);
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_0, ui32Load);
    //PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000);
    PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT, true);
    PWMGenEnable(PWM1_BASE, PWM_GEN_0);
}


/*
 * Function Name: irsensor_setup
 * Input: None
 * Output: None
 * Logic: set the things required for reading value from irsensor
 * Example call: irsensor_setup()
 */
void irsensor_setup(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE,1,0,ADC_CTL_CH5|ADC_CTL_IE|ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 1);
    GPIODirModeSet(GPIO_PORTD_BASE,GPIO_PIN_2|GPIO_PIN_3,GPIO_DIR_MODE_IN);
    GPIOPinTypeADC(GPIO_PORTD_BASE, GPIO_PIN_2|GPIO_PIN_3);
    GPIOPadConfigSet(GPIO_PORTD_BASE,GPIO_PIN_2|GPIO_PIN_3,GPIO_STRENGTH_12MA,GPIO_PIN_TYPE_STD_WPU);
}

/*
 * Function Name: prompt_message
 * Input: integer value for corresponding message
 * Output: prints the message on putty
 * Logic: sends the message byte by byte through UART0
 * Example call: prompt_message(0) to print Welcome to Autopark
 */
//utility function for prompting messages
void prompt_message(int k){
    char *msgs[]={"Welcome to AutoPark | ", "Vehicle detected | ", "Identifying the type of vehicle...... | ","RFID tag issued : ", "opening gate...... | ",
                "Slot available, issuing RFID... | ", "Slot not Available for this vehicle | ", "Invalid vehicle type. Please re-enter the type(v1/v2) | ",
                "Waiting for the vehicles | ","Enter the type of vehicle(v1/v2): ", "Invalid Tag detected | ", "Vehicle parked | ","Customer Leaving | ",
                "This Tag is not issued . | ","v1 slot0 ","v2 slot0 "};
    int i;
    for(i=0; i<strlen(msgs[k]); i++){
        UARTCharPut(UART0_BASE,msgs[k][i]);
    }
}

/*
 * Function Name: itoa
 * Input: an integer
 * Output: prints the integer on putty
 * Logic: convert the int to string and print them on putty through UART0
 * Example call: itoa(38)
 */
void itoa(int a){
    if(a){
        int i=10;
        char buff[12];
        buff[10]='u';
        buff[11]=' ';
        while(a){
            buff[--i]=a%10+'0';
            a/=10;
        }
        do{
            UARTCharPut(UART0_BASE,buff[i]);
        }while(buff[i++]!=' ');
    }
    else{
        UARTCharPut(UART0_BASE,'0');
        UARTCharPut(UART0_BASE,'u');
        UARTCharPut(UART0_BASE,' ');
    }
}

/*
 * Function Name: open_gate()
 * Input: None
 * Output: servo motor rotates to open the gate slowly
 * Logic: rotate the servo by changing
 * Example call: open_gate()
 */
void open_gate(void){
    while(ui8Adjust > 65){
        PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000);
        ui8Adjust--;
        SysCtlDelay(200000);
    }
}

/*
 * Function Name: close_gate
 * Input: None
 * Output: servo motor rotates to close the gate slowly
 * Logic: rotate the servo by changing
 * Example call: close_gate()
 */
void close_gate(void){
    while(ui8Adjust < 111){
        PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000);
        ui8Adjust++;
        SysCtlDelay(200000);
    }
}

/*
 * Function Name: get_no_rfid
 * Input: rfid tag
 * Output: slot no corresponding to rfid tag
 * Logic: it get the slot no from rfid_to_slot_map
 * Example call: get_no_rfid("ABGHTFDR45H6")
 */
int get_no_rfid(char id[]){
    int i;
    for(i=0;i<VEHICLE1_SLOTS+VEHICLE2_SLOTS; i++){
        int mismatch = 0;
        int j;
        for(j=0; j<RFID_TAG_LEN; j++){
            if(!(rfid_to_slot_map[i][j] == id[j])){
                mismatch = 1;
                break;
            }
        }
        if(mismatch == 0) return i+1;
    }
    return 0;
}

/*
 * Function Name: Timer0IntHandler
 * Input: None
 * Output: update the time_count
 * Logic: update the time_count when it is called
 * Example call: automatically called by scheduler
 */
void Timer0IntHandler(void){
    // Clear the timer interrupt
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    time_count++;
}

/*
 * Function Name: UART0IntHandler
 * Input: None
 * Output: does things accorading to input received
 * Logic: extract the charector from UART0Base base and then do things by checking its value
 * Example call: automatically called by scheduler when a char is received through UART0
 */
void UART0IntHandler(void){
    uint32_t ui32Status;
    ui32Status = UARTIntStatus(UART0_BASE, true); //get interrupt status
    UARTIntClear(UART0_BASE, ui32Status); //clear the asserted interrupts
    char type = '0';
    while(UARTCharsAvail(UART0_BASE)){
        char tmp = UARTCharGet(UART0_BASE);
        UARTCharPut(UART0_BASE, tmp);
        if(tmp == 'V' || tmp == 'v'){
            int count =0;
            while(count < 1){
                if(UARTCharsAvail(UART0_BASE)){
                    type = UARTCharGet(UART0_BASE);
                    UARTCharPut(UART0_BASE, type);
                    UARTCharPut(UART0_BASE, '|');
                    count++;
                }
            }
        }
    }
    int j;
    if(type == '1'){
        for(j=0;j<VEHICLE1_SLOTS;j++){
            if(slot_status_v1[j] == 0) {
                slot_status_v1[j] =1;
                prompt_message(5);
                prompt_message(3);
                int k;
                for(k = 0; k<strlen(rfid_to_slot_v1[j]); k++){
                    UARTCharPut(UART0_BASE,rfid_to_slot_v1[j][k]);
                }
                UARTCharPut(UART0_BASE, '-');
                UARTCharPut(UART0_BASE, get_no_rfid(rfid_to_slot_v1[j])+48);
                UARTCharPut(UART0_BASE,'|');
                //call open gate function
                open_gate();

                prompt_message(4);
                SysCtlDelay(150000000);

                //call the gate close function
                close_gate();
                is_processed = 1;
                break;
            }
        }
        if( j == VEHICLE1_SLOTS){
            prompt_message(6);
            is_processed = 1;
            SysCtlDelay(10000000);
        }
    }else if(type == '2'){
        for(j=0;j<VEHICLE2_SLOTS;j++){
           if(slot_status_v2[j] == 0) {
               slot_status_v2[j]=1;
               prompt_message(5);
               prompt_message(3);
               int k;
               for(k = 0; k<strlen(rfid_to_slot_v2[j]); k++){
                   UARTCharPut(UART0_BASE,rfid_to_slot_v2[j][k]);
               }
               UARTCharPut(UART0_BASE, '-');
               UARTCharPut(UART0_BASE, get_no_rfid(rfid_to_slot_v2[j])+48);
               UARTCharPut(UART0_BASE,'|');
               //call open gate function
               open_gate();

               prompt_message(4);
               SysCtlDelay(150000000);

               //call the gate close function
               close_gate();
               is_processed = 1;
               break;
           }
       }
       if(j == VEHICLE2_SLOTS){
           prompt_message(6);
           is_processed = 1;
           SysCtlDelay(10000000);
       }
    }else{
        prompt_message(7);
    }
}


// check mapping between tag value and slot number
/*
 * Function Name: update_slots
 * Input: None
 * Output: update the slot status map
 * Logic: it update the slot based on whether a vehicle is leaving or entering
 * Example call: update_slots()
 */
void update_slots(void){
    int k, j;
    // find the type of vehicle to which tag is assigned
    int type=0;
    for(k=0; k<VEHICLE1_SLOTS; k++){
        int mismatch=0;
        for(j = 0; j < RFID_TAG_LEN; j++){
            if(rfidValue[j]!=rfid_to_slot_v1[k][j]){
                mismatch=1;
                break;
            }
        }
        if(!mismatch){
            type=1;
            v_slot_no=k;
            break;
        }
    }

    if(type==0){
        for(k=0; k<VEHICLE2_SLOTS; k++){
            int mismatch=0;
            for(j = 0; j < RFID_TAG_LEN; j++){
                if(rfidValue[j]!=rfid_to_slot_v2[k][j]){
                    mismatch=1;
                    break;
                }
            }
            if(!mismatch){
                type=2;
                v_slot_no=k;
                break;
            }
        }
    }
    v_type=type;
}

/*
 * Function Name: show_signal
 * Input: None
 * Output: does things accorading to input received
 * Logic: shows green light for v1 and red for v2
 * Example call: show_signal()
 */
int show_signal(void){
    if(v_type == 1 && v_slot_no == 0){
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 8);
            SysCtlDelay(5000000);
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 0);
            return 1;
        }
        else{
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 2);
            SysCtlDelay(5000000);
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 0);
        }
    return 0;
}

/*
 * Function Name: UART1IntHandler
 * Input: None
 * Output: does things accorading to input received
 * Logic: extract the charector from UART1Base base and then do things by checking its value
 * Example call: automatically called by scheduler when a rfid tag is swiped through UART1
 */
void UART1IntHandler(void){

    uint32_t ui32Status;
    ui32Status = UARTIntStatus(UART1_BASE, true); //get interrupt status
    UARTIntClear(UART1_BASE, ui32Status); //clear the asserted interrupts

    //GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 4);
    //SysCtlDelay(500000);
    // over write rfidValue;
    int i;
    for(i=0; i<RFID_TAG_LEN; i++){
        rfidValue[i]='\0';
    }

    int count=0;
    while(count < RFID_TAG_LEN){
        if(UARTCharsAvail(UART1_BASE)){
            rfidValue[count]=UARTCharGet(UART1_BASE);
            count++;
        }
    }
    //UARTCharPut(UART0_BASE,'*');
    int position = get_no_rfid(rfidValue) -1;
    update_slots();
    //UARTCharPut(UART0_BASE,v_type+48);
    //UARTCharPut(UART0_BASE,v_slot_no+48);
    int is_issued = 1;
    if(v_type == 1){
        //UARTCharPut(UART0_BASE,rfid_to_slot_v1[v_slot_no]+48);
        if(slot_status_v1[v_slot_no] == 0){
            is_issued = 0;
            prompt_message(13);
        }
    }
    if(v_type == 2){
        if(slot_status_v2[v_slot_no] == 0){
            is_issued = 0;
            prompt_message(13);
        }
    }
    //UARTCharPut(UART0_BASE,position+48);
    if(position != -1){
        if(is_issued == 1){
        show_signal();
        if(rfid_status_map[position] == 0){
            rfid_status_map[position] = 1;
            time_to_slot_map[position]= time_count;
            //prompt_message(14);
            prompt_message(11);
        }else{
            rfid_status_map[position] =0;
            int t = time_count - time_to_slot_map[position];
            itoa(t);
            //UARTCharPut(UART0_BASE,'s');
            //UARTCharPut(UART0_BASE,'|');
            if(v_type == 1){
                slot_status_v1[v_slot_no] = 0;
                prompt_message(14);
                prompt_message(12);

            }
            if(v_type == 2){
                slot_status_v2[v_slot_no] = 0;
                prompt_message(15);
                prompt_message(12);
            }
            /*int c;
            for(c=0;c<strlen(buffer);c++){
                UARTCharPut(UART0_BASE,buffer[c]);
            }*/
        }
        }
    }else{
        prompt_message(10);
    }

    SysCtlDelay(20000000);
    /*GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 0);
    int count=0;
    if(UARTCharsAvail(UART1_BASE)){
       while(count < 12){
           if(UARTCharsAvail(UART1_BASE)){
           char tmp=UARTCharGet(UART1_BASE);
           if(tmp=='\0') UARTCharPut(UART0_BASE,'a');
           else UARTCharPut(UART0_BASE,tmp);
           count++;
           }
       }
    }
       //UARTCharPut(UART0_BASE, '2');
       UARTCharPut(UART0_BASE,' ');
       UARTCharPut(UART0_BASE,'*');
       UARTCharPut(UART0_BASE,' ');
       SysCtlDelay(100000);
       //putChar(rfidValue);
       GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_1, 0);*/
}

/*
 * Function Name: sense_obstacles
 * Input: None
 * Output: when a vehicle is detected wait to know the type of vehicle and end of its processing
 * Logic: detects vehicle through proximity sensor
 * Example call: sense_obstacles
 */
void sense_obstacles(){
    while(1){
        ADCIntClear(ADC0_BASE, 1);
        ADCProcessorTrigger(ADC0_BASE, 1);
        while(!ADCIntStatus(ADC0_BASE, 1, false));

        //read the ADC value from the ADC Sample Sequencer 1 FIFO
        ADCSequenceDataGet(ADC0_BASE, 1, irSignal);
        if(irSignal[0] > MIN_SGN_STR){
            prompt_message(1);
            prompt_message(2);
            is_processed = 0;
            while(!is_processed);
            prompt_message(8);
        }
        SysCtlDelay(100000);
    }
}

/*
 * Function Name: main
 * Input: None
 * Output: None
 * Logic: The code starts executing fom here
 * Example call: its automatically called by the process
 */
int main(){

    /*
     * the work of below functions are mentioned above
     */
    system_setup();
    terminal_setup();
    rfid_setup();
    servo_setup();
    irsensor_setup();
    timer_setup();
    prompt_message(0);
    prompt_message(8);

    //then call IR sensor function
    sense_obstacles();
}
