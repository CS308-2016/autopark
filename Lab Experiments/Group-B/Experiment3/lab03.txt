int mode =0;
volatile uint8_t redAdjust = 254;
volatile uint8_t blueAdjust = 254;
volatile uint8_t greenAdjust = 254;
volatile uint32_t ui32Load;
volatile uint32_t ui32PWMClock;
void auto_mode(void){

}

void check_press(void){
	if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00 && GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
		int count = 0;
		while(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00 && GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
			count++;
			SysCtlDelay(100000);
		}
		if(count > 2) mode = 3;
	}else{
		if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
			int c = 0;
			while(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
				if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00){
					c++;
				}
				SysCtlDelay(100000);
			}
			switch(c){
				case 1: mode = 1;
				break;
				case 2: mode = 2;
				break;
				default:break;
			}
		}
	}
	return;
}
void man_mode1(void){
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, redAdjust * ui32Load / 1000);
	while(1){
		//check_press();
		if(mode != 1) return;
		else{
			if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
				//decrease intensity
				redAdjust++;
				if (redAdjust > 254)
				{
					redAdjust = 254;
				}
				PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, redAdjust * ui32Load / 1000);
			}else{
				if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00){
					//increase intensity
					redAdjust--;
					if (redAdjust < 10)
					{
						redAdjust = 10;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, redAdjust * ui32Load / 1000);
				}
			}
		}
	}
}
void man_mode2(void){
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_2);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, blueAdjust * ui32Load / 1000);
	while(1){
		//check_press();
		if(mode != 2) return;
		else{
			if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
				//decrease intensity
				blueAdjust++;
				if (blueAdjust > 254)
				{
					blueAdjust = 254;
				}
				PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, blueAdjust * ui32Load / 1000);
			}else{
				if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00){
					//increase intensity
					blueAdjust--;
					if (blueAdjust < 10)
					{
						blueAdjust = 10;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, blueAdjust * ui32Load / 1000);
				}
			}
		}
	}
}
void man_mode3(void){
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_3);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, greenAdjust * ui32Load / 1000);
	while(1){
		//check_press();
		if(mode != 3) return;
		else{
			if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
				//decrease intensity
				greenAdjust++;
				if (greenAdjust > 254)
				{
					greenAdjust = 254;
				}
				PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, greenAdjust * ui32Load / 1000);
				
			}else{
				if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00){
					//increase intensity
					greenAdjust--;
					if (greenAdjust < 10)
					{
						greenAdjust = 10;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, greenAdjust * ui32Load / 1000);
				}
			}
		}
	}
}
void man_mode(void){
	while(1){
		check_press();
		switch(mode){
			case 1: man_mode1();
			break;
			case 2: man_mode2();
			break;
			case 3: man_mode3();
			default:break;
		}
	}
}

void main(){
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
	SysCtlPWMClockSet(SYSCTL_PWMDIV_64);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
	GPIOPinConfigure(GPIO_PF1_M1PWM5);

	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
	HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
	GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
	GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

	ui32PWMClock = SysCtlClockGet() / 64;
	ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
	PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, ui32Load);

	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8Adjust * ui32Load / 1000);
	PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);
	PWMGenEnable(PWM1_BASE, PWM_GEN_2);
	auto_mode();
	man_mode();
}